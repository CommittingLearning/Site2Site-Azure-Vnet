name: Azure Terraform CI/CD Pipeline

# Only run on pull requests (for code validation and testing)
# and on pushes to development and production (for full deployment)
on:
    pull_request:
        branches:
            - development
            - production
            - testing
    push:
        branches:
            - development
            - production

jobs:
    validate-and-test:
        runs-on: ubuntu-latest

        steps:
        - name: Checkout code
          uses: actions/checkout@v2

        - name: Set up Terraform
          uses: hashicorp/setup-terraform@v1

        # Pre-deployment checks: Terraform validation and plan
        - name: Terraform Validate
          run: terraform validate

        - name: terraform Plan
          run: terraform plan -var-file:"${{ github.head_ref }}.tfvars"

        # Security testing with TFSec
        - name: Run TFSec Security Checks
          run: |
            curl -s https://raw.githubusercontent.com/aquasecurity/tfsec/master/scripts/install_linux.sh | bash tfsec .
        
        # Unit & integration tests with Terratest
        - name: Run Terratest
          run: |
            go test -v ./test

        # Skip applying changes in pull requests
        - name: Skip Apply in Pull Requests
          if: github.event_name == 'pull_request'
          run: |
            echo "Skipping apply since this is a pull request validation."
            exit 0

    deploy:
        needs: validate-and-test
        runs-on: ubuntu-latest
        # Runs only on push events
        if: github.event_name != 'pull_request'

        steps:
        - name: Checkout code
          uses: actions/checkout@v2

        # Re-run Terraform plan before applying
        - name: Terraform Plan (Re-run)
          run: terraform plan -var-file="${{ github.ref_name }}.tfvars"

        # Manual approval before terraform apply
        - name: Manual Approval
          uses: hmarr/auto-approve-action@v2
          with:
            github-token: ${{ secrets.GITHUB_TOKEN }}

        # Apply changes after approval
        - name: Terraform Apply
          run: terrform apply -var-file="${{ github.ref_name }}.tfvars"

        # Wait for 1 hour and destroy resources
        - name: Wait for demonstration period
          run: sleep 3600

        # Destroy resources to avoid unnecessary costs
        - name: Terraform Destroy
          run: terraform destroy -auto-approve -var-file="${{ github.ref_name }}.tfvars"