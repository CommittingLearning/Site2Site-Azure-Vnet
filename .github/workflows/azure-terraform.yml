name: Azure Terraform CI/CD Pipeline

# Only run on pull requests (for code validation and testing)
# and on pushes to development and production (for full deployment)
on:
    pull_request:
        branches:
            - development
            - production
            - testing
    push:
        branches:
            - development
            - production

jobs:
    validate-and-test:
        runs-on: ubuntu-latest

        steps:
        - name: Checkout code
          uses: actions/checkout@v2

        # Extract Azure credentials from Github Secrets
        - name: Configure Azure Credentials
          run: |
            echo "AZURE_SUBSCRIPTION_ID=${{ secrets.AZURE_SUBSCRIPTION_ID }}" >> $GITHUB_ENV
            echo "AZURE_CLIENT_ID=${{ secrets.AZURE_CLIENT_ID }}" >> $GITHUB_ENV
            echo "AZURE_CLIENT_SECRET=${{ secrets.AZURE_CLIENT_SECRET }}" >> $GITHUB_ENV
            echo "AZURE_TENANT_ID=${{ secrets.AZURE_TENANT_ID }}" >> $GITHUB_ENV

        - name: Set up Terraform
          uses: hashicorp/setup-terraform@v1

        # Initialize Terraform Working Directory
        - name: Terraform Init
          run: terraform init  

        # Pre-deployment checks: Terraform validation and plan
        - name: Terraform Validate
          run: terraform validate

        # Set environment variable based on branch
        - name: Set environment variable based on branch
          run: |
            if [[ "${{ github.ref }}" == "refs/heads/development" ]]; then
              echo "ENVIRONMENT=development" >> $GITHUB_ENV
            elif [[ "${{ github.ref }}" == "refs/heads/production" ]]; then
              echo "ENVIRONMENT=production" >> $GITHUB_ENV
            else
              echo "ENVIRONMENT=default" >> $GITHUB_ENV
            fi

        # Terraform Plan with environment passed 
        - name: terraform Plan
          run: terraform plan -var="environment=${{ env.ENVIRONMENT }}"

        # Security testing with TFSec
        - name: Run TFSec Security Checks
          run: |
            curl -s https://raw.githubusercontent.com/aquasecurity/tfsec/master/scripts/install_linux.sh | bash tfsec .
        
        # Unit & integration tests with Terratest
        - name: Run Terratest
          run: |
            go test -v ./test

        # Skip applying changes in pull requests
        - name: Skip Apply in Pull Requests
          if: github.event_name == 'pull_request'
          run: |
            echo "Skipping apply since this is a pull request validation."
            exit 0

    deploy:
        needs: validate-and-test
        runs-on: ubuntu-latest
        # Runs only on push events
        if: github.event_name != 'pull_request'

        steps:
        - name: Checkout code
          uses: actions/checkout@v2

        # Extract Azure credentials from Github Secrets
        - name: Configure Azure Credentials
          run: |
            echo "AZURE_SUBSCRIPTION_ID=${{ secrets.AZURE_SUBSCRIPTION_ID }}" >> $GITHUB_ENV
            echo "AZURE_CLIENT_ID=${{ secrets.AZURE_CLIENT_ID }}" >> $GITHUB_ENV
            echo "AZURE_CLIENT_SECRET=${{ secrets.AZURE_CLIENT_SECRET }}" >> $GITHUB_ENV
            echo "AZURE_TENANT_ID=${{ secrets.AZURE_TENANT_ID }}" >> $GITHUB_ENV

        # Initialize Terraform Working Directory
        - name: Terraform Init
          run: terraform init

        # Re-run Terraform plan before applying
        - name: Terraform Plan (Re-run)
          run: terraform plan -var="azure_subscription_id=${{ env.AZURE_SUBSCRIPTION_ID }}" \
                              -var="azure_client_id=${{ env.AZURE_CLIENT_ID }}" \
                              -var="azure_client_secret=${{ env.AZURE_CLIENT_SECRET }}" \
                              -var="azure_tenant_id=${{ env.AZURE_TENANT_ID }}" \
                              -var="environment=${{ env.ENVIRONMENT }}"

        # Manual approval before terraform apply
        - name: Manual Approval
          uses: hmarr/auto-approve-action@v2
          with:
            github-token: ${{ secrets.GITHUB_TOKEN }}

        # Apply changes after approval
        - name: Terraform Apply
          run: terraform apply -var="azure_subscription_id=${{ env.AZURE_SUBSCRIPTION_ID }}" \
                               -var="azure_client_id=${{ env.AZURE_CLIENT_ID }}" \
                               -var="azure_client_secret=${{ env.AZURE_CLIENT_SECRET }}" \
                               -var="azure_tenant_id=${{ env.AZURE_TENANT_ID }}" \
                               -var="environment=${{ env.ENVIRONMENT }}"

        # Wait for 1 hour and destroy resources
        - name: Wait for demonstration period
          run: sleep 3600

        # Destroy resources to avoid unnecessary costs
        - name: Terraform Destroy
          run: terraform destroy -auto-approve \
              -var="azure_subscription_id=${{ env.AZURE_SUBSCRIPTION_ID }}" \
              -var="azure_client_id=${{ env.AZURE_CLIENT_ID }}" \
              -var="azure_client_secret=${{ env.AZURE_CLIENT_SECRET }}" \
              -var="azure_tenant_id=${{ env.AZURE_TENANT_ID }}" \
              -var="environment=${{ env.ENVIRONMENT }}"